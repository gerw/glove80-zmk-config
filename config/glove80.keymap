/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include "keys_de.h"

#define HYPER LC(LS(LG(LALT)))

// Umlauts
#define DE_AUML DE_A_UMLAUT
#define DE_OUML DE_O_UMLAUT
#define DE_UUML DE_U_UMLAUT

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

// Macro for shift-morphed key
#define SHIFTED_RAW(name, normal, shifted)           \
	name: name ## _behaviour {                         \
		compatible = "zmk,behavior-mod-morph";           \
		#binding-cells = <0>;                            \
		bindings = <normal>, <shifted>;                  \
		mods = <(MOD_LSFT|MOD_RSFT)>;                    \
	};

// Macro for shift-morphed key with &kp's
#define SHIFTED(name, normal, shifted) SHIFTED_RAW(name, &kp normal, &kp shifted)

// Macro for shift-number keys which do not morph if alt is pressed
#define SHIFTED_WO_ALT(name, normal, shifted)        \
	name ## _inner: name ## _inner_behaviour {         \
		compatible = "zmk,behavior-mod-morph";           \
		#binding-cells = <0>;                            \
		bindings = <&kp normal>, <&kp shifted>;          \
		mods = <(MOD_LSFT|MOD_RSFT)>;                    \
	};                                                 \
	                                                   \
	name: name ## _behaviour{                          \
		compatible = "zmk,behavior-mod-morph";           \
		#binding-cells = <0>;                            \
		bindings = <&name ## _inner>, <&kp normal>;      \
		mods = <(MOD_LALT|MOD_RALT)>;                    \
		keep-mods = <(MOD_LALT|MOD_RALT)>;               \
	};


&sk {
    release-after-ms = <250>;
    quick-release;
};

/ {

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        ssk: smart_sticky_key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-while-undecided;
            hold-while-undecided-linger;
            bindings = <&kp>, <&sk>;
        };

        grave_dance: grave_dance_behaviour {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RA(DE_GRAVE)>, <&kp DE_GRAVE>, <&triple_grave>;
        };

        SHIFTED_RAW( ac_gr, &kp RA(DE_ACUTE), &grave_dance )

        SHIFTED( c_sz, DE_CARET, DE_SZ )
        SHIFTED( co_lt, DE_COMMA, DE_LESS_THAN )
        SHIFTED( do_gt, DE_DOT, DE_GREATER_THAN )
        SHIFTED( sc_col, DE_SEMICOLON, DE_COLON )
        SHIFTED( qt_dqt, DE_SINGLE_QUOTE, DE_DOUBLE_QUOTES )
        SHIFTED( bsl_qm, DE_BACKSLASH, DE_QUESTION )
        SHIFTED( tld_hsh, DE_TILDE, DE_HASH )

        SHIFTED_WO_ALT( zwei_at,   DE_N2, DE_AT )
        SHIFTED_WO_ALT( sieben_sz, DE_N7, DE_SZ )
        SHIFTED_WO_ALT( acht_bar,  DE_N8, DE_PIPE )

    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };

        triple_grave: triple_grave_behaviour {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp DE_GRAVE &kp DE_GRAVE &kp DE_GRAVE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  ^ß   |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |  ´`  |
            // |  TAB  |  Ü  |  ,< |  .>  |  P   |  Y   |                                                 |  F   |   G   |   C   |  T   |   Z   |  \?` | 
            // |  ESC  |  A  |  O  |  E   |  I   |  U   |                                                 |  H   |   D   |   R   |  N   |   S   |   L  |
            // |   Ä   |  Ö  |  Q  |  J   |  K   |  X   | LCTRL | LGUI  | DEL   | | RCTRL | RSHFT | LOWER |  B   |   M   |   W   |  V   |   -_  |  '"  |
            // | MAGIC | LEFT|RIGHT| DOWN |  UP  |      | LSHFT | LALT  | BSPC  | | LALT  | RET   | SPACE |      |  PGUP | PGDN  |  ;:  |   +*  |  ~#  |

            bindings = <
            &kp F1         &kp F2       &kp F3      &kp F4       &kp F5                                                                                               &kp F6     &kp F7       &kp F8        &kp F9          &kp F10
            &c_sz          &kp N1       &zwei_at    &kp N3       &kp N4    &kp N5                                                                        &kp N6       &sieben_sz &acht_bar    &kp N9        &kp N0          &ac_gr
            &kp TAB        &kp DE_UUML  &co_lt      &do_gt       &kp DE_P  &kp DE_Y                                                                      &kp DE_F     &kp DE_G   &kp DE_C     &kp DE_T      &kp DE_Z        &bsl_qm
            &kp ESC        &kp DE_A     &kp DE_O    &kp DE_E     &kp DE_I  &kp DE_U                                                                      &kp DE_H     &kp DE_D   &kp DE_R     &kp DE_N      &kp DE_S        &kp DE_L
            &kp DE_AUML    &kp DE_OUML  &kp DE_Q    &kp DE_J     &kp DE_K  &kp DE_X &kp LCTRL        &kp LGUI  &kp DEL     &kp RCTRL &kp RSHFT &layer_td &kp DE_B     &kp DE_M   &kp DE_W     &kp DE_V      &kp DE_MINUS    &qt_dqt
            &magic MAGIC 0 &kp LEFT     &kp RIGHT   &kp DOWN     &kp UP             &ssk LSHFT LSHFT &kp LALT  &kp BSPC    &kp LALT  &kp RET   &kp SPACE              &kp PG_UP  &kp PG_DN    &sc_col       &kp DE_PLUS     &tld_hsh
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN   &kp C_BRI_UP &kp C_MUTE  &kp C_VOL_DN &kp C_VOL_UP                                                                                        &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &none          &none        &none       &none        &kp INS      &kp HOME                                                                  &none        &kp KP_NUM &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans         &kp DE_TILDE &kp DE_FSLH &kp DE_LBRC  &kp DE_RBRC  &kp END                                                                   &none        &kp KP_N7  &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans         &kp DE_CARET &kp DE_BSLH &kp DE_LBKT  &kp DE_RBKT  &kp DE_DLLR                                                               &kp DE_PRCNT &kp KP_N4  &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &none          &kp K_CMENU  &none       &kp DE_LPAR  &kp DE_RPAR  &none       &trans    &trans    &trans   &trans    &trans    &to DEFAULT  &kp KP_COMMA &kp KP_N1  &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &none
            &trans         &trans       &trans      &trans       &trans                   &trans    &trans    &trans   &trans    &trans    &trans                    &kp KP_N0  &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &none
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR   &none           &none           &none           &none                                                                                  &none  &none  &none &none &bt BT_CLR_ALL
            &none        &none           &none           &none           &none           &none                                                           &none  &none  &none  &none &none &none
            &none        &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                 &none  &none  &none  &none &none &none
            &bootloader  &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                 &none  &none  &none  &none &none &bootloader
            &sys_reset   &none           &none           &none           &none           &none           &bt_2  &bt_3 &none        &none  &none  &none   &none  &none  &none  &none &none &sys_reset
            &none        &none           &none           &none           &none                           &bt_0  &bt_1 &out OUT_USB &none  &none  &none          &none  &none  &none &none &none
            >;
        };
    };
};
